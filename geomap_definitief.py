# -*- coding: utf-8 -*-
"""Geomap definitief

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dysDkYzuj0_JVLw0UAfUh30m_ohBRGkw

Code to implement coordinates into google map api
"""

!pip install piexif
!pip install GPSPhoto
!pip install EXIF
!pip install exifread
!pip install gmplot
!pip install exif
!pip install Pillow
!pip install numpy
!pip install pandas
!pip install gmaps

#importing drive 
from google.colab import auth
auth.authenticate_user()
import gspread
from oauth2client.client import GoogleCredentials
gc = gspread.authorize(GoogleCredentials.get_application_default())

from google.colab import drive
drive.mount('/content/drive/')

#takes images from file in project if they are jpgs
import os
image_dir = os.listdir('/content/drive/MyDrive/Geomap/Pictures_geomap')
image_list = [a for a in image_dir if a.endswith('jpg')]
print(image_list)


#checks for metadata in image list

from PIL import Image
from PIL.ExifTags import TAGS
from PIL.ExifTags import GPSTAGS

coordinates_list = []


  #No metadata at all found
def get_geotagging(exif):
      if not exif:
          raise ValueError("No EXIF metadata found")
  #No geotagging at all found
      geotagging = {}
      for (idx, tag) in TAGS.items():
          if tag == 'GPSInfo':
              if idx not in exif:
                  raise ValueError("No EXIF geotagging found")

              for (key, val) in GPSTAGS.items():
                  if key in exif[idx]:
                      geotagging[val] = exif[idx][key]

      return geotagging
  
# path to the image or video and collects exifdata 
for a in range(len(image_list)):
  image_dir = '/content/drive/MyDrive/Geomap/Pictures_geomap/' + image_list[a]
  # read the image data using PIL
  image = Image.open(image_dir)
  exifdata = image._getexif()
  print(exifdata)
  geotags = get_geotagging(exifdata)
  
#converting from dms to decimal
  exif = image._getexif() 
  def get_decimal_from_dms(dms, ref):

    degrees = dms[0][0] / dms[0][1]
    minutes = dms[1][0] / dms[1][1] / 60.0
    seconds = dms[2][0] / dms[2][1] / 3600.0

    if ref in ['S', 'W']:
        degrees = -degrees
        minutes = -minutes
        seconds = -seconds

    return round(degrees + minutes + seconds, 5)

  def get_coordinates(geotags):
    lat = get_decimal_from_dms(geotags['GPSLatitude'], geotags['GPSLatitudeRef'])
    lon = get_decimal_from_dms(geotags['GPSLongitude'], geotags['GPSLongitudeRef'])
    return(lat,lon) 
  #puts decimal coordinates into coordinates list
  decimal_coordinates = get_coordinates(get_geotagging(exif))
  coordinates_list.insert(0, decimal_coordinates)



# import gmplot package
import gmplot
apikey = "AIzaSyA7JvXONuenKF4ec46w4YLJDl5hQNgZIYg"

gmap1 = gmplot.GoogleMapPlotter(0, 0 , 13, apikey = apikey)
# scatter points on the google map
for a in coordinates_list:
  lat = a[0]
  lon = a[1]
  gmap1.marker(lat, lon, 'blue', size = 40, marker = True )

# Pass the absolute path
gmap1.draw( "/content/drive/MyDrive/Geomap/geomap")



import numpy as np 
import pandas as pd 
import gmaps 
import gmaps.datasets 


gmaps.configure(apikey)

m = gmaps.Map()

locations = coordinates_list
heatmap_layer = gmaps.Heatmap(locations)
m.add_layer(heatmap_layer)
m

coordinates_dataframe = pd.DataFrame(coordinates_list, columns=['Latitude', 'Longitude'])
coordinates_dataframe.head()

Lon = np.arange(51.37, 52.24, 0.0087) 
Lat = np.arange(50.76, 53.54, 0.0278) 



Waste_count = np.zeros((100,100))



"""# Nieuwe sectie"""

#import io #Input/output
from pandas import DataFrame

#df = pd.read_excel(io.BytesIO(uploaded['Coordinates.xlsx'])) #Get dataframe for input (Geomap)

#takes longitude and latitude out of excel file
#filename=r'Coordinates.xlsx'
longitude = []
longitude = list(df['Longitude'])


latitude = []
latitude = list(df['Latitude'])

#calculating root coordinates   #TO DO: FIX IT SO LIST BECOMES INT, MAYBE NO BRACKETS
avg_latitude = sum(latitude) / len(latitude)
avg_longitude = sum(longitude) / len(longitude)

